1st digit = milestone change (Like if I ever get the damn thing operating soley in memory)
2nd digit = crypto change that renders older version's password files incompataible
3rd digit = functional change which does not render program incompatiable with previous version's password files

2018-12-14
(+ver 1.22.2)
	Changed EVP routines to be compatiable to OpenSSL 1.1
2018-12-13
(+ver 1.22.1)
	Added length checking in getPass() function to mitigate buffer overflow potential
2018-12-10
(+ver 1.22.0)
	YAXA key buffer changed to be 1025 bytes so that yaxaKey[1024] can be accessed validly
	and iteration doesn't have to stop at yaxaKey[1023] which for some reason was causing
	a repeating keystream
	YAXA nonce buffer changed to 65 bytes for same reason
2018-12-09
(+ver 1.21.0)
	Fixed bug with YAXA and KC variables as well as iteration error with YAXA key and nonce.
	YAXA algorithm now operates as designed, with no periodic incidence in keystream with 256+ passwords
2018-12-05
(+ver 1.20.0)
	Changed YAXA KDF and KC variable.  Discovered keystream will become periodic if more than 256 password entries.
	Also discovered 'ii' is equal to one less on each iteration, and without this, keystream is periodic
2018-11-28
(+ver 1.19.0)
	Removed YAXA iterations as they were causing non-periodic keystream to become periodic
	Changed YAXA key size to be static 8192 bit instead of variable
2018-11-26
(+ver 1.18.2)
	Added "genalpha" to generate a alphanumeric password with no special characters
(+ver 1.18.1)
	Changed wipefile method to Schneier 7 Pass
(+ver 1.18.0)
	Updated MAC to use HMAC instead of a simple SHA512 hash
2018-11-25
(+ver 1.17.0)
	Updated YAXA to use a 512-bit periodic nonce generated by pbkdf2
	Changed default EVP encryption to aes-256-ctr
(+ver 1.16.2)
	Fixed bug in updateEntry where passes and entries weren't being saved correctly after 1.13.1
	Fixed bug with puedo random padding not being added
(+ver 1.16.0)
	EVP and YAXA ciphers now use individual salts.  Each are regenerated with each change of the file. This avoids nonce reuse vulnerability that was present in all previous versions.
	Renamed dbPass, yaxaKey and evpKey to more sensible values, fixed heap corruption with dbPass
2018-11-20
(+ver 1.14.0)
	Fixed implementation error, OpenSSL cipher key was derived from the key generated by YAXA KDF.  Now  the EVP kdf and YAXA KDF use the same user supplied password.
(+ver 1.13.3)
	Can now update all passes with a random password in update entry mode
(+ver 1.13.2)
	Added method to clear the clipboard of the password a certain amount of seconds after the program has exited.
	Added the ability for user to specify how many seconds to wait before clearing clipboard
2018-11-19
(+ver 1.13.1)
	Changed authentication and temp file protection to MAC-and-encrypt to Encrypt-then-mac
2018-11-18
(+ver 1.13.0)
	Changed yaxaKDF to use a 64-bit salt instead of 32-bit
	Also fixed yaxaKDF to be using the right password length in the PBKDF2 iteration factor
	Changed PBKDF2 iteration expression from keyIterationFactor * passLength + 1 to keyIterationFactor * passLength + salt[i]
2018-11-16
(+ver 1.12.2)
	Fixed bug where EVP encryption was reset to default if -U was given without -c or -H
	Changed temporary file names to be random, and to open in system's tempdir
	Changed XCET to YAXA ( Yet another XOR Algorithm )
	Added signal handling to cleanup if Ctrl-C recieved
	Randomized cryptobuffer is it's not padded by zeroes
	Made printPasses notify if no entires matched searchstring
	Cleanup optarg and argv
2018-11-05
(+ver 1.11.1) Completely changed XCET operations.  Now the functions read the entire file into a buffer and operate instead of in 1024 chunks.
		Streamlined the KAKeyStreamGen operation, got rid of CTAKstream gen.
		Changed xcetKDF() to generate at least a 64 character password and 1024 at most
		Added clean-up routines for the buffers involved with XCET operations
		Changed usage syntax to match -u where -n is no longer needed to specify entry except with -u mode
		To show all passwords now use '-r allpasses"
2018-10-24
(+ver 1.10.0) Changed XCET operation to be shifted right and left by various patterns over mulitple lines...  Not much like XCET anymore, maybe change name.
(+ver 1.9.0) Changed XCET operation and variable names.  Now uses CTAK and KAK counters.  xcetKDF() produces an xcetPass up to 512 characters.
The actual chracter amount used will be randomly determined by where along this buffer PBKDF2 places a null terminator.
fileSizeCounter added so that there is a non-repeating element to xor the message byte for the entire length of the database file
(+ver 1.7.1) Fixed bug with update entry
(+ver 1.7.0) Changed xcetKDF to use the same random salt as EVPBytesToKey
2018-10-23
(+ver 1.6.5) Fixed bug which backed up password file to autoback even if in read mode.  Also changed saltBuff to be allocated in allocateBuffers()
(+ver 1.6.4) Fixed bug with Delete mode where it was deleting 1 entry regardless if one 1 matched or not.  Now also deletes multiple matches.
2018-10-22
(+ver 1.6.3) Improved wipeFile() function to mimmick Gutmann method
(+ver 1.6.2) Changed xcetKDF's derivation to PBKDF2 from openssl
(ver 1.6.1) Added iteration to the xcetKDF's sha512 hashing. 
Changed the iteration formulaic to strlen(xcetPass) * keyIterationFactor % INT_MAX where keyIteractionFactor = 1000 (Since RFC 2898 to PBKDF standard seems to think that's fine)
(+ver 1.6) Changed xcet pass to be a sha512 hash of the pass entered by the user
2018-10-21
(ver 1.5.1)Changed MAC generation to be based on buffer of xcet data rather than just xcet pass so it's an actual MAC
(+ver 1.5) Salted
2018-10-20
(+ver 1.4) Changed EVPBytesToKey iteration count to formulaic number. strlen(xcetPass) * keyIterationFactor % INT_MAX where keyIteractionFactor = USHRT_MAX
1.3.2 Added send to clipboard function
1.3.1 Changed the options regarding -c, -H, -U and -P as they apply to updating database password
(+ver 1.3) Added cryptosettings to header so that user only needs to specify new cipher or digest when adding or updating the database
if they want to use a custom cipher. Previously the -c and -H options HAD to be enabled to use any custom cipher for any mode.
2018-10-19
(1.2.2)chmod temp files to read/write only for owner
(1.2.2)Create backup of database before doing anything with it
(1.2.2)Updated syntax handling of updateEntry() mode so that new entry name or password can be supplied via command line as well as prompted for
(1.2.2)Fixed malloc() corruption in main() when calling wipeFile on tmpFile2
(+ver 1.2.2)Added password generator if 'gen' is supplised as password
2018-10-18
(1.2.1)Changed rand() to RAND_bytes() for better randomness
(1.2.1)Changed buffers to global scope in order to make clean up available from one function
(1.2.1)Added error handling and status code to error oute more gracefully
2018-10-17
(1.2.1)Added ability to update database encryption/digest algorithm as well as password
(1.2.1)Changed default hash digest to SHA512 (keep at x.x.1 since I can specify to use this digest instead of old SHA1)
(1.2.1)Added update entry function
(1.2.1)Added checkMAC() and sealEnvelope() functions to reduce redundant code
2018-10-14
(1.2.1)Changed names of file handles to make temporary file handling more clear
(+ver 1.2)Changed #DECRYPTED# hash tag to a MAC generated by SHA512
2018-10-13
(+ver 1.1) Added a #DECRYTED# hash tag to check temporary files for to ensure that encryption was done correctly.  This is better than just letting garbage fill
the screen, and safer than using the IV as a hash to check against.
2018-10-12
(1.0.2)Added abiity for user to specify which hash digest and encryption algorithms to use.
(+ver 1.0.2)Added functions to list available OpenSSL message digests and cipher algorithms.
2018-10-11
(1.0.1)Fixed bug in deletePass function that resulted in a buffer overrun when no entry matched the string specified by -n
(1.0.1)Changed strcmp to strncmp to print partial matches of specified entry names when printing
(1.0.1)Changed mention of "xcet" password to "database" password in prompts for extra use-clarity
(+ver 1.0.1)Added workaround for Issue #1 and noDeletes variable to check if deletePasses deleted anything in future error handling
2016-08-20
(ver 1.0)Changed encryption to aes-256-cbc and digest from md5 to sha1
2015-05-12
(+ver 1.0)Added function to update the encryption password for entire archive
