.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.
.TH PASSMANAGER "1" "January 2019" "passmanager 2.2.0" "User Commands"
.SH NAME
passmanager \- manual page for passmanager 2.2.1
.SH SYNOPSIS
.PP
passmanager [\fB\-a\fR \fIentry name\fI\fR | \fB\-r\fR \fIentry name\fI\fR | \fB\-d\fR \fIentry name\fI\fR | \fB\-u\fR \fIentry name\fI\fR [-n \fInew name\fI\fR ] | \fB\-U\fR ] [\-p \fInew entry password\fI\fR] [\-l \fIrandom password length\fI\fR] [\-x \fIdatabase password\fI\fR] [\-c \fIfirst-cipher:second-cipher\fI\fR] [\-H \fIfirst:digest:second-digest\fI\fR] [ \fB\-P\fR ] \fB\-f\fR \fIdatabase file\fI\fR [ \fB\-C\fR ] [ \fB-s\fB\fR \fIseconds\fIs\fR ]

.PP
.SH OPTIONS SUMMARY
.PP
Options may have different implications depending on operating mode
.PP
\fB\-r\fR \fIentry name\fI\fR\ - Lookup \fIentry name\fI\fR in \fBRead\fR mode ('allpasses' will print all passes)
.PP
\fB\-a\fR \fIentry name\fI\fR\ - Add \fIentry name\fI\fR in \fBAdd\fR mode
.PP
\fB\-d\fR \fIentry name\fI\fR\ - Delete \fIentry name\fI\fR in \fBDelete\fR mode
.PP
\fB\-u\fR \fIentry name\fI\fR\ - Update \fIentry name\fI\fR in \fBUpdate entry\fR mode
.PP
\fB\-n\fR \fInew name\fI\fR\ - entry name up to 512 characters (can contain white space or special characters)
.PP
\fB\-U - \fBUpdate database\fB\fR mode
.PP
\fB\-p\fR \fInew entry password\fI\fR \- entry password up to 512 characters (don't call to be prompted instead) ('gen' will generate a random password, 'genalpha' will generate a random password with no symbols)
.PP
\fB\-l\fR \fIrandom password length\fI\fR \- makes 'gen' or 'genalpha' generate a password \fIrandom password length\fI\fR digits long (defaults to 16 without this option)
.PP
\fB\-x\fR \fIdatabase password\fI\fR \- To supply database password as command-line argument (not reccomended)
.PP
\fB\-c\fR \fIfirst-cipher:second-cipher\fI\fR \- Specify 'list' for a list of methods available to OpenSSL. Default: camellia-256-ofb:aes-256-ctr.
.PP
\fB\-H\fR \fIfirst-digest:second-digest\fI\fR \- Specify 'list' for a list of methods available to OpenSSL. Default: whirlpool:sha512.
.PP
\fB\-P\fR - In \fIUpdate entry\fI\fR or \fIUpdate database\fI\fR  mode (\fB\-u\fR and \fB\-U\fR respectively) this option enables updating the \fIentry password\fI\fR or \fIdatabase password\fI\fR via prompt instead of as command line argument
.PP
\fB\-f\fR - \fIdatabase file\fI\fR ( must be specified )
.PP
\fB\-C\fR - end \fIentry password\fI\fR directly to clipboard. Clipboard is cleared 30 seconds afterward. (needs xclip)
.PP
\fB-s\fB\fR \fIseconds\fI\fR - clear clipboard \fIseconds\fI\fR after instead of default 30
.PP
\fB\-h\fR - Quick usage help
.PP

.SH DESCRIPTION

passmanager  is an ultra simple, but very secure password management program written in C and making use of OpenSSL's Libcrypto API libraries.  The
passwords can be written, read, updated or deleted from an encrypted database file.  


New passwords can be randomly generated when creating or updating account credentials. Passwords  can  be  matched by entry name, and printed/updated/deleted in bulk or individually. All password entries in the database can be updated at once with ease. If the user updated/deleted a password they didn't intend to, the program lists which entries were matched and edited, and provides an automatically produced backup file to restore from. The database password and encryption method can be changed at any time.


The program pays special attention to minimize the amount user passwords are displayed on screen or stored in memory, and allows them to be sent directly to the clipboard (via xclip), with the password being cleared from the clipboard after 30 seconds. Allowing the passwords to be sent directly to the clipboard means adding, updating or retrieving a password can be done without it ever being visible on the screen. Even if a user must display an entry's password to verify it, only that pass can be printed, in order to prevent the entire database being displayed on screen.  Authenticated encryption protects the database against both data corruption and tampering.


Account credentials are stored with cascading encryption. First 256-bit camellia is used in OFB mode, and then camellia's cipher-text data is further encrypted into aes 256-bit in CTR mode. Using OpenSSL's EVP functions also enables the use of any encryption and digest algorithms ( for key derivation ) supported by  the EVP interface.  For example, encryption can be done with blowfish, cascaded into AES, and the KDF can use the whirlpool for blowfish and sha512 for AES.


User input is stored in 512 byte buffers padded by cryptographically strong pseudorandom data: One for an entry's name, and the other for that entry's password.
This allows very large passwords, as well as long and flexible entry names, which can be comprised of service names and account names, and are best
delimited  with a colon. The program will print out each buffer delimited as a colon as well, in a list of "entry name : entry pass" format.  The
format of "entry name" is up to the user.

For example, here the user manually delimits the service and the account name

.RS 50
service : account : password
.sp 0
foobar : foo : passfoo
.sp 0
gmail : account@gmail.com : (*&*UJD83dh
.sp 0
.RE

.ad l
But any of these are also possible

.RS 50
just a user account : password
.sp 0
foo - bar : foobar : foobar
.sp 0
555 867 5309 : (*&*UJD83dh
.sp 0
.RE

.ad l
With this format and the modes provided, the user can easily and securely manage the contents of the database.

.SH MODES
.PP
.SS \fBAdd mode\fR
.PP
In \fBAdd\fB\fR mode the password database is initialized with the first entry, or a new entry is added to an existing password database. The user may specify a cipher and/or digest to use upon initialization of the database.
.PP
When adding a new entry, its password can be sent directly to clipboard.  This is especially useful for generating new passwords, where 'gen' can be given as the \fIentry password\fI\fR argument and the new randomly generated password will be sent to the clipboard.
.PP 
Applicable options
.RS
\fB\-p\fR \fInew entry password\fI\fR - 'gen' will generate a random password, 'genalpha' will generate a random password with no symbols
.HP
\fB\-l\fR \fIrandom password length\fI\fR \- makes 'gen' or 'genalpha' generate a password \fIrandom password length\fI\fR digits long (defaults to 16 without this option)
.HP
\fB\-x\fR \fIdatabase password\fI\fR
.HP
\fB\-c\fR \fIfirst-cipher:second-cipher\fI\fR \- Initializes a password database with cascaded encryption of 'first-cipher' into 'second-cipher'
.HP
\fB\-H\fR \fIfirst-digest:second-digest\fI\fR \- Derives keys for ciphers with digests 'first-digest' for 'first-cipher' and 'second-digest' for 'second-cipher
.HP
\fB\-C\fR send \fInew entry password\fI\fR to clipboard (useful if randomly generated)
.HP
\fB-s\fB\fR \fIseconds\fI\fR - clear clipboard \fIseconds\fI\fR after instead of default 30
.RE
.PP
.SS \fBRead mode\fR
.PP
In \fBRead\fB\fR mode the password database is searched for an entry with the name \fIentry name\fI\fR for partial or full matches so that \fIentry name\fI\fR of 'app' will find entry names 'apple' and 'appliances'. 
.PP
Entries can be specifically matched such as "gmail : account1" and "gmail : account2", or both with 'gmail'.
.PP
Searching for a specific entry pass can be useful to send the password directly to the clipboard using xclip.
.PP
To display the entire password database, enter 'allpasses' for the \fIentry name\fI\fR argument.
.PP
Applicable options
.RS
\fB\-x\fR \fIdatabase password\fI\fR
.HP
\fB\-C\fR send \fIentry name\fI\fR password directly to clipboard (useful to avoid displaying passwords on screen)
.HP
\fB-s\fB\fR \fIseconds\fI\fR - clear clipboard \fIseconds\fI\fR after instead of default 30
.RE
.PP
.SS \fBDelete mode\fR
.PP
In \fBDelete\fB\fR mode one or more password entries can be deleted. \fIentry name\fI\fR can be partially or fully matched as in \fBRead\fB\fR mode.
.PP
Applicable options
.RS
\fB\-x\fR \fIdatabase password\fI\fR
.RE
.PP
.SS \fBUpdate entry mode\fR
.PP
In \fBUpdate entry\fB\fR mode one or multiple entries are updated.  As in \fBRead\fB\fR and \fBAdd\fB\fR modes, the \fIentry name\fI\fR will be fully or partially matched.
.PP
Both the entry name and password can be updated. The new entry name can be supplied via command line only, but the new password can be received via prompt or as a command line argument ( not recommended ).
.PP
As in \fBAdd\fB\fR mode, entering 'gen' for the \fIentry password\fI\fR argument will generate a random password.  This is especially useful for updating old passwords.

Single new passwords can be sent directly to the clipboard with xclip as well.

All entries can be updated at once with new randomly generated passwords, if \fIentry name\fI\fR is equal to 'allpasses'
.PP
Applicable options
.RS
\fB\-P\fR
updates \fIentry name\fI\fR and \fIentry password\fI\fR, getting \fInew entry password\fI\fR via user input instead of command line (\fB\-p\fR)
.HP
\fB\-p\fR \fInew entry password\fI\fR \- update \fIentry name\fI\fR password to \fInew entry password\fI\fR
.HP
\fB\-l\fR \fIrandom password length\fI\fR \- makes 'gen' or 'genalpha' generate a password \fIrandom password length\fI\fR digits long (defaults to 16 without this option)
.HP
\fB\-n\fR \fInew name\fI\fR \- update \fIentry name\fI\fR  to \fInew name\fI\fR. Without this itâ€™s assumed you're only changing the password of \fIentry name\fI\fR.
.HP
\fB\-x\fR \fIdatabase password\fI\fR
.HP
\fB\-C\fR send \fInew entry password\fI\fR directly to clipboard after updating \fIentry name\fI\fR
.HP
\fB-s\fB\fR \fIseconds\fI\fR - clear clipboard \fIseconds\fI\fR after instead of default 30
.RE
.PP
.SS \fBUpdate database mode\fR
.PP
In \fBUpdate database\fB\fR mode the password and the underlying OpenSSL encryption of the database can be updated.
.PP
If option \fB-c\fB\fR or \fB-H\fB\fR given to update the encryption or digest algorithm ( respectively ) then \fB-P\fB\fR is needed to change the database password as well.
.PP
If only option \fB-U\fB\fR is present, then only the password id updated.
.PP
The new password can only be received via prompt, and cannot be given on the command line. However the current \fIdatabase password\fI\fR can still be received with the \fB-x\fB\fR option.
.PP
Applicable options
.RS
\fB\-P\fR
updates database password. Read via prompt. Cannot be supplied via commandline.
.HP
\fB\-x\fR \fIdatabase password\fI\fR (the current database password to decrypt/with)
.HP
\fB\-c\fR \fIfirst-cipher:second-cipher\fI\fR \- Updates algorithms in cascade
.HP
\fB\-H\fR \fIfirst-digest:second-digest\fI\fR \- Update digests used for cascaded algorithms' KDFs
.RE
.PP

.SH OPENSSL NOTES

.SS Camellia

Camellia was chosen as the 1st algorithm in the cascade by default simply because it is certified by the European Union's "NESSIE" and Japan's "CRYPTREC", and from all cursory research, is comparable to AES.  AES could have been used twice, as long as each encipherment of AES used an unrelated and independent key.  If not, in CFB/CTR/OFB modes, the AES encryption would be reversed by the subsequent AES encryption if the same key was used.  Even though two distinct keys are generated, using two distinct algorithms means there is virtually no chance of the keystreams used for each encipherment being closely related.  A user can still select to double-encrypt with one algorithm and remain secure, but cascaded encryption with two distinct algorithms and two distinct keys is slightly more secure in the sense it can better prevent related keystreams leaking plain-text data into the final encipherment.

.SS CFB, OFB and CTR Modes

\fBThe program will enforce CFB, OFB or CTR modes.\fB\fR  

These modes effectively turn block ciphers into stream ciphers, and the reason we would want that in this context is because using two stream ciphers in cascading encryption makes the resulting encryption at least as hard to break as the strongest algorithm (Schneier).  Otherwise, if a mode like CBC is used, certain chosen plain-text attacks (e.g. meet-in-the-middle) may be feasible to conduct against the 2nd algorithm in the cascade.

.SS OpenSSL Ciphers and Digests

The encryption algorithm used by OpenSSL can be chosen between the ciphers provided by the high-level functions in the \fIevp(3)\fI\fR library. By default the program uses 256-bit camellia in OFB mode followed by 256-bit AES in CTR mode, using the \fIPKCS5_PBKDF2_HMAC(3)\fI\fR function to derive distinct keys (see \fIPKCS5_PBKDF2_HMAC(3)\fI\fR for details), and the whirlpool SHA512 digest algorithm (respectively) for the KDF.

There are also some exotic digest options such as "RSA encrypted SHA512" which might provide extra security over SHA512 alone.  However, OpenSSL's documentation is not clear on what this entails or how it should be implemented, so it is probably safer to use the more vanilla offerings. Whirlpool and SHA512 were chosen because they both provide 64-byte hashes, they are secure and well peer-reviewed, and this will also help prevent any keystream relation.

.SS CSPRNG

The EVP library also provides access to OpenSSL's CSPRNG as described in \fIRAND(3)\fI\fR.  The \fIRAND_bytes(3)\fI\fR function is what fills the buffers with pseudorandomness, generates random passwords, and generates the salt which generates camellia's nonce as well.

.SH SECURITY DESIGN NOTES

.SS Input Padding
Input buffers will accept any amount of whitespace or special characters up to 512 characters in length.  The buffers are padded with pseudo-random data from a Cryptographically Strong Pseudo Random Number Generator (CSPRNG). This was done with more consideration than simply providing ample memory for user input.

The extra space being padded with pseudo-random data also helps suppress natural-language frequencies, making frequency analysis of the plain-text less useful. This is because the padding always makes plaintext unique and pseudorandom despite any identical and/or predictable user input.  This also has the effect of lengthening the keystream generated, but without increasing determinism into it with more identical and/or predictable plain-text.

A different cipher-text will be generated for every password database file, even if it's encrypted with the same password, user input, and even the same salt. This is because plain-text will never be the same even with identical user input, due to the pseudo-random buffer padding.  Of course this only applies to the initialization of the database file; subsequent updates of the same file could have repeatable plain-text, so the use of salts and nonces is still necessary.

.SS Cascaded Encryption Security

In the classic Alice and Bob model, if Bob does not trust Alice's cipher, he can encrypt his message with his cipher, and then encrypt that cipher-text into a second cipher-text with Alice's cipher.  Alice can then decrypt it using her cipher, and then decrypt the second cipher-text using Bob's cipher.  In this way Bob does not have to trust Alice's cipher, and Alice is unaffected by vulnerabilities in Bob's cipher, and vise versa.  This is most widely known as cascaded encryption.

The primary purpose of the cascaded encryption in this program, however, is mainly to make the attack on its temporary files less practical than other side-channel attacks. Some argue that a cascaded cipher may be more susceptible to chosen plain-text attacks, notably meet-in-the-middle attacks. However, according to Bruce Schneier in "Applied Cryptography", that applies mostly to the cipher-block chaining mode. As long as the first and second algorithms in the cascade are both stream ciphers (or implemented in a mode that effectively makes them stream ciphers), then the combination of the two is at least as strong as the strongest algorithm, and not susceptible to meet-in-the-middle attacks.

Therefore if the 2nd algorithm adds no significant cryptographic strength, then the combination of the two is still at least as strong as the 1st algorithm used, or vise versa. If some vulnerability in the 1st algorithm were discovered, the cipher-text will only be as vulnerable as the 2nd algorithm used.  The default implementation uses camellia in OFB mode as the 1st algorithm, and AES in CTR mode as the 2nd algorithm, effectively making them both stream ciphers. Because OFB and CTR mode make a cipher malleable, the cipher-text generated by camellia is verified by a Message Authentication Code generated with a secure HMAC function to guard against chosen cipher-text attack.

.SS Envelope Concept

Note: This program's conceptualization of envelopes is unrelated to OpenSSL's asymmetric encryption functions with similar names provided by the EVP library.

The cipher-text of the 1st algorithm is ran through HMAC-SHA512 to create a Message Authentication Code before being encrypted with the 2nd algorithm. The 1st algorithmâ€™s cipher-text and the MAC are then placed together inside of an "envelope".  Therefore, the 2nd algorithm is driven by two primary functions, \fIopenEnvelope()\fI\fR and \fIsealEnvelope()\fI\fR which contain the 2nd algorithm's routines to "seal" the 1st algorithm's cipher-text message and MAC into an "envelope", or to "open" an envelope containing them.

\fIsealEnvelope()\fI\fR is used to encrypt the 1st algorithmâ€™s ciphertext (the password database created from user input and padded buffers) with the 2nd algorithm to create an encrypted "envelope" containing the encrypted password database.  The cipher-text of the 1st algorithm is ran through HMAC-SHA512 to create the MAC, then the MAC is concatenated to the ciphertext before being passed to \fIsealEnvelope()\fI\fR and encrypted again with the 2nd algorithm.  The resulting file can be considered the "envelope" we're opening and sealing, which contains the encrypted password database inside. \fIopenEnvelope()\fI\fR decrypts the cipher-text data created by the 2nd algorithm, the envelope, and then passes the 1st algorithm's cipher-text, the encrypted password database, on to be checked by HMAC-SHA512.  If the MAC generated matches the MAC attached to the cipher-text, it is passed on for decryption and further processing by the 1st algorithm and the application's operation modes.  Once modifications are complete, the new message (the encrypted database) is passed to \fIsealEnvelope()\fi\fR to form the new "envelope".

.SS Authentication Composition

This program uses the Encrypt-then-MAC form of authentication composition on the 1st algorithm.  With this composition, the program uses HMAC-SHA512 to generate a MAC on the cipher-text produced by the 1st algorithm. This MAC is concatenated to the end of the 1st algorithm's cipher-text before the whole combination of message and MAC is encrypted by the 2nd algorithm.  When the 1st algorithm is ready to receive the 2nd algorithmâ€™s decrypted plaintext ( which is also the 1st algorithm's cipher-text) the program will then run HMAC-SHA512 against the message data, and check it against the attached MAC. If the attached MAC doesn't match the MAC generated by the message data (meaning the 1st algorithmâ€™s cipher-text was modified), then no further decryption is done by the 1st algorithm, and the program exits instead.

Using authentication on the 1st algorithm encryptions alone still means the program is secure against chosen cipher-text attack, but not necessarily to adaptive chosen cipher-text attacks (Green). Ideally, a change to the cipher-text of the 2nd algorithm should correspond to a change in the cipher-text of the 1st algorithm that will be detected with the MAC.  However, if the 2nd algorithm used something like CBC, changes to its padding could be accepted by the 2nd algorithm, without detectable changes made to the cipher-text of the 1st.  Since CFB, OFB or CTR mode is enforced, changes to the 2nd algorithm's cipher-text will force corresponding changes in the 1st algorithmâ€™s cipher-text, which will be detectable by HMAC.

.SS Temporary Files vs Memory Buffers

The program uses temporary files to store and process data, rather than operate solely in memory. camellia-256-OFB (or whatever else is chosen as the 1st algorithm) prevents that data from being sent to disk in plain-text. Data remanence issues of using temporary files to store the data for processing are obvious, and the Schneier 7-Pass method is used to erase sensitive data from files before exit; though this is redundant as the data is already encrypted.  The program cleans up these files, as well as buffers that were storing sensitive information, upon closing or receiving SIGINT or some other error. \fIOPENSSL_cleanse()\fi\fR is used to ensure sanitation calls aren't optimized away by the compiler. The temporary files are also protected by the authenticated encryption described above.

The temporary files are also given a random name that is of a random length, and with read/write permissions only for the file owner.  Despite this, it is still trivial to modify, intercept or inject data into or out of the program via the temporary files if an attacker has elevated privileges. Authenticated encryption also helps protect against man-in-the-middle/chosen-cipher-text attacks attempting to modify cipher-text data on its way from disk to memory. In addition the random file names means an attacker must be able to predict which file contains which data in order to forge cipher-text and the accompanied MAC, and they would have to somehow time and/or automate such an attack.

Writing the program to function solely in memory would not necessarily make the program more secure, especially not in respect to any circumstance that would make storing the information to temporary files vulnerable (i.e. an attacker has root access to the machine the program runs on). At best it would only make the information harder to access without a filesystem abstraction; an attacker could write a simple shell script to intercept data into temp files, but would need to write something more sophisticated to access it from memory buffers. On the other hand, if the information in those temp files is encrypted, suddenly the level of sophistication needed to exploit them goes up.

With all that in mind, while operating solely in memory may seem much more secure superficially, the vulnerability of leaving the data in temporary files is only relevant in a situation where storage in memory is mutually vulnerable. Even then, encryption protects the secrets of the plain-text in the temp files, and authentication protects the temp files from tampering, and both effectively make an attack against the temporary files no simpler (and probably much more complicated) than an attack against program memory.

.SS Memory Locking, Core-Dump and Process-Trace Prevention

The program will attempt to "lock" all memory, which will prevent it from accidentally being swapped out to disk.  It also prevents process tracing, and core dump upon crash.  In order to do this, the program needs root priveleges, but drops them after these settings have been made. The executable is installed with the SETUID and SETGID bits and with root as the owner, so the user need not actually execute it as root.

.SH EXAMPLES

Initialize a new password database and save it to the file passwords.  Also randomly generate a password of 32 characters for the new entry, and send that new password to the clipboard.

.RS
passmanager -a "gmail : myemail@gmail.com" -p gen -l 32 -f ./passwords -C
.RE

Change the encryption to encipher blowfish into camellia, and derive the key for blowfish with the whirlpool digest algorithm, and the key for camellia with sha512

.RS
passmanager -U -c blowfish-ofb:camellia-256-ofb -H whirlpool:sha512 -f ./passwords
.RE

Print a list of available ciphers

.RS
passmanager -c list
.RE

Print a list of available digests

.RS
passmanager -H list
.RE

Can also change password for the database (Will be prompted for input)

.RS
passmanager -U -f ./passwords
.RE

Or you could do both change the password, and the underlying encryption in one command

.RS
passmanager -U -c camellia-256-ofb:aes-256-ctr -H whirlpool:sha512 -P -f ./passwords
.RE

Update the previously added entry name from "gmail : myemail@gmail.com" to "gmail : myemail1@gmail.com" (Note how we're partially matching "gmail", and the need for quotations around the new entry name since it contains whitespace)

.RS
passmanager -u gmail -n "gmail : myemail1@gmail.com" -f ./passwords
.RE

Add a second gmail account but with the entry password "password"

.RS
passmanager -a "gmail : myemail2@gmail.com" -p password -f ./passwords
.RE

If you are following these examples sequentially, this is how you would print out your password database, and what it would look like on screen.

.RS 
passmanager -r allpasses -f ./passwords
.RE

.RS 40
gmail : myemail1@gmail.com : Us3[Ag1<lRw9%Vj5>La0{Nh4|Kr8$Te7
.sp 0
gmail : myemail2@gmail.com : password
.RE

.sp 1
To update the password for myemail2@gmail.com with a randomly generated 16 character (default) password, and send the newly created password to clipboard

.RS
passmanager -u "gmail : myemail2" -p gen -f ./passwords -C
.RE

To update the passsword but prompt the user for password

.RS
passmanager -u "gmail : myemail2" -P -f ./passwords
.RE

Read the new password for myemail2@gmail.com and send it directly to the clipboard

.RS
passmanager -r "gmail : myemail2" -C -f ./passwords
.RE

Or to just print both gmail passwords on screen ( but no other entry passwords )

.RS
passmanager -r gmail -f ./passwords
.RE

To delete both of the gmail accounts. (Note no need for quotation marks since we can partially match both entry names before the whitespace portions)

.RS
passmanager -d gmail -f ./passwords
.RE

To print all passwords in database, and supply the database password as a command-line argument (Perhaps to fill in from some other location besides user input)

.RS
passmanager -r allpasses -f ./passwords -x password
.RE

To update all passwords in database with a randomly generated passwords

.RS
passmanager -u allpasses -p gen -f ./passwords
.RE

.SH BUGS

Dead-store elimination means that some of the sensitive material in memory buffers may not be able to be cleared.  The makefile provided disables optimization, and OPENSSL_cleanse is used if a user wishes to implement optimzation anyway.  Despite that, dead-store elimination has been found to be present in OpenSSL <=1.0.1q itself as well.

.SH "SEE ALSO"
openssl(1), xclip(1), crypto(3), evp(3), EVP_EncryptInit(3), PKCS5_PBKDF2_HMAC(3), RAND(3), RAND_bytes(3)



